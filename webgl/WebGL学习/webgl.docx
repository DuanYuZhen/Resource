hgis2.0优化：
（1）canvas的resize问题解决方法：https://webglfundamentals.org/webgl/lessons/zh_cn/webgl-resizing-the-canvas.html






--WebGL在电脑的GPU中运行。
--在GPU上运行的代码是成对的，一个叫顶点着色器， 另一个叫片元着色器。都使用强类型的语言 GLSL。 每一对组合起来称作一个  
program（着色程序）。

--顶点着色器的作用是计算顶点的位置。即对点、线和三角形的图元进行光栅化处理。即用哪几个像素点来绘制。
--片元着色器的作用是计算要绘制的像素点的颜色值。

--着色器获取数据的4种方法：
1、属性（Attributes）和缓冲？不是很明白，看了代码，回头再看
2、全局变量（Uniforms）在着色程序运行前赋值，在运行过程中全局有效。
3、纹理（Textures）是一个图像数据序列，可以随意存放除了颜色数据以外的其它数据。
4、可变量是一种顶点着色器给片断着色器传值的方式，可变量会在片元着色器运行中有不同的插值。


--WebGL只关心两件事：裁剪空间中的坐标值和颜色值。顶点着色器提供裁剪空间坐标值，片元着色器提供颜色值。
--裁剪空间的坐标范围永远都是-1到1.

--#version 300 es MUST BE THE VERY FIRST LINE OF YOUR SHADER："#version 300 es"必须在着色器代码的首行。
----------------------------------------------------------------------------------
---代码步骤：
--1
 <canvas id="c"></canvas>
  var canvas = document.getElementById("c");

--2
var gl = canvas.getContext("webgl2");
 if (!gl) {
	//上下文丢失
 }

--3
var vertexShaderSource = `#version 300 es
 
// an attribute is an input (in) to a vertex shader.
// It will receive data from a buffer
in vec4 a_position;
 
// all shaders have a main function
void main() {
 
  // gl_Position is a special variable a vertex shader
  // is responsible for setting
  gl_Position = a_position;
}
`;
 
var fragmentShaderSource = `#version 300 es
 
// fragment shaders don't have a default precision so we need
// to pick one. mediump is a good default. It means "medium precision"
precision mediump float;
 
// we need to declare an output for the fragment shader
out vec4 outColor;
 
void main() {
  // Just set the output to a constant redish-purple
  outColor = vec4(1, 0, 0.5, 1);
}
`;
--4
function createShader(gl, type, source) {
  var shader = gl.createShader(type);
  gl.shaderSource(shader, source);
  gl.compileShader(shader);
  var success = gl.getShaderParameter(shader, gl.COMPILE_STATUS);
  if (success) {
    return shader;
  }
 
  console.log(gl.getShaderInfoLog(shader));
  gl.deleteShader(shader);
}
var vertexShader = createShader(gl, gl.VERTEX_SHADER, vertexShaderSource);
var fragmentShader = createShader(gl, gl.FRAGMENT_SHADER, fragmentShaderSource);

--5
function createProgram(gl, vertexShader, fragmentShader) {
  var program = gl.createProgram();
  gl.attachShader(program, vertexShader);
  gl.attachShader(program, fragmentShader);
  gl.linkProgram(program);
  var success = gl.getProgramParameter(program, gl.LINK_STATUS);
  if (success) {
    return program;
  }
 
  console.log(gl.getProgramInfoLog(program));
  gl.deleteProgram(program);
}
var program = createProgram(gl, vertexShader, fragmentShader);

--6
得到属性值的位置
var positionAttributeLocation = gl.getAttribLocation(program, "a_position");

--7
var positionBuffer = gl.createBuffer();
gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);//gl.ARRAY_BUFFER是绑定点，将缓冲和外部将要传入的数据源连接

--8
// three 2d points——三个二维点
var positions = [
  0, 0,
  0, 0.5,
  0.7, 0,
];
gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(positions), gl.STATIC_DRAW);
//WebGL需要强类型数据,所以用new Float32Array类型接入数据
//这个方法将数据通过绑定点传入到缓冲中
//gl.STATIC_DRAW是提示WebGL我们将怎么使用这些数据

***以上的代码是初始化代码。这些代码在页面加载时只会运行一次
-------------------------------------------------------------------------------------------------


渲染：
画布就像图片一样有两个尺寸。
（1）一个是实际像素个数；一个是显示的大小。尽可能用CSS设置所需画布大小 ，因为它比其它方式灵活的多。
（2）<canvas id="c" width="10" height="15" style="width: 400px; height: 300px;"></canvas>
10,15为画布的像素大小；400,300为画布的显示大小。

function resize(canvas) {
  // 获取浏览器中画布的显示尺寸
  var displayWidth  = canvas.clientWidth;
  var displayHeight = canvas.clientHeight;
 
  // 检尺寸是否相同
  if (canvas.width  != displayWidth ||
      canvas.height != displayHeight) {
 
    // 设置为相同的尺寸
    canvas.width  = displayWidth;
    canvas.height = displayHeight;
  }
}
（3）第一次创建WebGL上下文的时候，WebGL会设置视域大小和画布大小匹配。
     但是在那之后就需要你自己设置。当你改变画布大小就需要告诉WebGL新的视域设置。
     需要调用gl.viewport设置视域： gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);
（4）webgl可以实现高清显示，具体详见：https://webglfundamentals.org/webgl/lessons/zh_cn/webgl-resizing-the- 
canvas.html
-------------------------------------------------------------------------------------------
WebGL工作原理：
（1）WebGL在GPU上的工作基本上分为两部分，第一部分是将顶点（或数据流）转换到裁剪空间坐标， 第二部分是基于第一部分的结 
果绘制像素点。



--------------------------------------------------------------------------------------------
1.顶点着色器中的“属性变量”可以用的类型有： float, vec2, vec3, vec4, mat2, mat3, mat4, int, ivec2, ivec3, ivec4,  
uint, uvec2, uvec3, uvec4。
2.全局变量：值不变，在一次绘制过程中传递给着色器的值都一样。注意：全局变量只属于一个着色程序。到底设置的是哪个着色程 
序的全局变量，看gl.useProgram用的是哪个着色程序。
eg：
在gl.useProgram后设置，在绘制前设置：
var offsetLoc = gl.getUniformLocation(someProgram, "u_offset");
gl.uniform4fv(offsetLoc, [1, 0, 0, 0]);  // offset it to the right half the screen

全局变量有很多类型，对应的类型有对应的设置方法：
 
3、每个顶点都会调用一次顶点着色器。
在顶点着色器的光栅化中，每个像素都会调用一次片元着色器。

